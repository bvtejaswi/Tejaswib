// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: greetpb/greet.proto

package greetpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreetsServiceClient is the client API for GreetsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetsServiceClient interface {
	Greet(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error)
	GreetManyTimes(ctx context.Context, in *GreetManyTimesRequest, opts ...grpc.CallOption) (GreetsService_GreetManyTimesClient, error)
}

type greetsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetsServiceClient(cc grpc.ClientConnInterface) GreetsServiceClient {
	return &greetsServiceClient{cc}
}

func (c *greetsServiceClient) Greet(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error) {
	out := new(GreetResponse)
	err := c.cc.Invoke(ctx, "/greetpb.GreetsService/Greet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetsServiceClient) GreetManyTimes(ctx context.Context, in *GreetManyTimesRequest, opts ...grpc.CallOption) (GreetsService_GreetManyTimesClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetsService_ServiceDesc.Streams[0], "/greetpb.GreetsService/GreetManyTimes", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetsServiceGreetManyTimesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GreetsService_GreetManyTimesClient interface {
	Recv() (*GreetManyTimesResponse, error)
	grpc.ClientStream
}

type greetsServiceGreetManyTimesClient struct {
	grpc.ClientStream
}

func (x *greetsServiceGreetManyTimesClient) Recv() (*GreetManyTimesResponse, error) {
	m := new(GreetManyTimesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetsServiceServer is the server API for GreetsService service.
// All implementations must embed UnimplementedGreetsServiceServer
// for forward compatibility
type GreetsServiceServer interface {
	Greet(context.Context, *GreetRequest) (*GreetResponse, error)
	GreetManyTimes(*GreetManyTimesRequest, GreetsService_GreetManyTimesServer) error
	mustEmbedUnimplementedGreetsServiceServer()
}

// UnimplementedGreetsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGreetsServiceServer struct {
}

func (UnimplementedGreetsServiceServer) Greet(context.Context, *GreetRequest) (*GreetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Greet not implemented")
}
func (UnimplementedGreetsServiceServer) GreetManyTimes(*GreetManyTimesRequest, GreetsService_GreetManyTimesServer) error {
	return status.Errorf(codes.Unimplemented, "method GreetManyTimes not implemented")
}
func (UnimplementedGreetsServiceServer) mustEmbedUnimplementedGreetsServiceServer() {}

// UnsafeGreetsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetsServiceServer will
// result in compilation errors.
type UnsafeGreetsServiceServer interface {
	mustEmbedUnimplementedGreetsServiceServer()
}

func RegisterGreetsServiceServer(s grpc.ServiceRegistrar, srv GreetsServiceServer) {
	s.RegisterService(&GreetsService_ServiceDesc, srv)
}

func _GreetsService_Greet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetsServiceServer).Greet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greetpb.GreetsService/Greet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetsServiceServer).Greet(ctx, req.(*GreetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetsService_GreetManyTimes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GreetManyTimesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreetsServiceServer).GreetManyTimes(m, &greetsServiceGreetManyTimesServer{stream})
}

type GreetsService_GreetManyTimesServer interface {
	Send(*GreetManyTimesResponse) error
	grpc.ServerStream
}

type greetsServiceGreetManyTimesServer struct {
	grpc.ServerStream
}

func (x *greetsServiceGreetManyTimesServer) Send(m *GreetManyTimesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// GreetsService_ServiceDesc is the grpc.ServiceDesc for GreetsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greetpb.GreetsService",
	HandlerType: (*GreetsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greet",
			Handler:    _GreetsService_Greet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GreetManyTimes",
			Handler:       _GreetsService_GreetManyTimes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "greetpb/greet.proto",
}
